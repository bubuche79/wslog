#
# Unset or clear RELEASE_BUILD for final builds. It will turn on
# optimization, strip symbols from objects, etc.
#
RELEASE_BUILD =	\#

#
# Command paths
#
AR =		ar
INSTALL =	install
LN =		ln
MKDIR =		mkdir
MV =		mv -f
RM =		rm -f
SYMLINK =	ln -fs

STRIP =		strip

FILEMODE =	644
DIRMODE =	755

#
# Install macros
# INS.rename: install and rename
# INS.link: install a link
#
INS.file =	$(INSTALL) -m $(FILEMODE) $< $@
INS.dir =	$(INSTALL) -d -m $(DIRMODE) $@
INS.rename =	$(INSTALL) -T -m $(FILEMODE) $< $@
INS.link =	$(SYMLINK) $< $@

# Turn warnings into errors
STD_FLAGS =	-pedantic -std=c11
ERR_FLAGS =	-Wall -Wextra \
	-Wno-missing-field-initializers \
	-Wstrict-prototypes -Wmissing-prototypes -Wshadow

# Some POSIX or other variables
LFS_CFLAGS =	-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64

# Compilation flags
POSIX_CPPFLAGS =	-D_XOPEN_SOURCE=700

DBG_FLAGS =	-g -D_DEBUG
$(RELEASE_BUILD)DBG_FLAGS = -O2

CPPFLAGS :=	$(POSIX_CPPFLAGS) $(LFS_CFLAGS) $(CPPFLAGS)
CFLAGS :=	$($(MACH)_CFLAGS) $(STD_FLAGS) $(DBG_FLAGS) $(ERR_FLAGS) $(CFLAGS)

LDFLAGS :=	$(LDFLAGS)

#
# Define compilation macros
# Note that with gcc, -MD is used to generate a dependency output file as a
# side-effect of the compilation process.
#
COMPILE.c =	$(CC) $(CPPFLAGS) $(CFLAGS) -MD -c
COMPILE.cxx =	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -MD -c

#
# Define link macros
#
LINK.c =	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)
LINK.cxx =	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)

#
# Define compilers
#
CC =		gcc
CXX =		g++
CPP =		cpp
LD =		ld

#
# Post processing macros
#
OBJ_STRIP =	$(STRIP) -x $@

POST_PROCESS.o =
POST_PROCESS.a =
$(RELEASE_BUILD)POST_PROCESS.so = $(OBJ_STRIP)
$(RELEASE_BUILD)POST_PROCESS = $(OBJ_STRIP)

#
# Default rules
#
%.o: %.c
	$(COMPILE.c) -o $@ $<
	$(POST_PROCESS.o)

%.o: %.cpp
	$(COMPILE.cxx) -o $@ $<
	$(POST_PROCESS.o)
