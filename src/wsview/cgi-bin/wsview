#!/usr/bin/lua

require "wsview.util"

function header()
	print("Content-type: text/html; charset=utf-8\n")

	print([[<html>
<head>
  <meta charset="utf-8">
  <link type="text/css" rel="stylesheet" href="/wsview-static/wsview.css">
  <link type="text/css" rel="stylesheet" href="/wsview-static/chartist.min.css">
  <script type="text/javascript" src="/wsview-static/Chart.min.js"></script>
  <script type="text/javascript" src="/wsview-static/chartist.min.js"></script>
</head>
<body>
<div id="header">
<div id="menu">
<nav id="menu-nav">
  <a href="/cgi-bin/wsview/" title="Current">Current</a></li>
  <a href="/cgi-bin/wsview/summary/" title="Summary">Summary</a></li>
</nav>
</div>
</div>]])
end

function footer()
	print([[</body></html>]])
end

function test_chartist()
	print([[<div id="chart" class="ct-chart ct-perfect-fourth"></div>
<script>
fetch('/cgi-bin/wsview/rest/today.json')
	.then(function(response) { return response.json(); })
	.then(function(data) { new Chartist.Line('.ct-chart', data); });
</script>]])
end

function test_chartjs()
	print([[
<canvas id="chart" width="400" height="400"></canvas>
<script>
var ctx = document.getElementById("chart");
fetch('/cgi-bin/wsview/rest/today.json')
	.then(function(response) { return response.json(); })
	.then(function(data) { new Chart(ctx, { type: 'bar', data: data }); });
</script>]])
end

function dispatch()
	lang = getlang()
	path = os.getenv("PATH_INFO") or "/"

	if path == "/summary/" then
		require "wsview.summary"
		header()
		summary_today()
		footer()
	elseif path == "/rest/today.json" then
		require "wsview.rest"
		rest_today()
	elseif path == "/" then
		require "wsview.current"
		require "wsview.summary"
		header()
		current()
		summary_today()
		test_chartjs()
		footer()
	end
end

function run()
	local x = coroutine.create(dispatch)
	local hcache = ""
	local active = true
	
	while coroutine.status(x) ~= "dead" do
		local res, id, data1, data2 = coroutine.resume(x, r)

		if not res then
			print("Status: 500 Internal Server Error")
			print("Content-Type: text/plain\n")
			print(id)
			break;
		end

		if active then
			if id == 1 then
				io.write("Status: " .. tostring(data1) .. " " .. data2 .. "\r\n")
			elseif id == 2 then
				hcache = hcache .. data1 .. ": " .. data2 .. "\r\n"
			elseif id == 3 then
				io.write(hcache)
				io.write("\r\n")
			elseif id == 4 then
				io.write(tostring(data1 or ""))
			elseif id == 5 then
				io.flush()
				io.close()
				active = false
			elseif id == 6 then
				data1:copyz(nixio.stdout, data2)
				data1:close()
			end
		end
	end
end

run()
