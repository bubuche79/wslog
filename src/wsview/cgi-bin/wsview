#!/usr/bin/lua

require "wsview.util"
local http = require "wsview.http"

function header()
	http.prepare_content("text/html; charset=utf-8")

	http.write([[<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link type="text/css" rel="stylesheet" href="/luci-static/bootstrap/cascade.css">
  <link type="text/css" rel="stylesheet" href="/wsview-static/wsview.css">
  <script type="text/javascript" src="/wsview-static/wsview.js"></script>
</head>
<body>
<header>
<div class="fill">
<div class="container">
<a class="brand" href="#">WSVIEW</a>
<ul class="nav">
 <li><a href="/cgi-bin/wsview/">Temps r√©el</a></li>
 <li><a href="/cgi-bin/wsview/summary/">Summary</a></li>
 <li class="dropdown">
  <a class="menu" href="#">Climat</a>
  <ul class="dropdown-menu">
   <li><a href="/cgi-bin/wsview/climate/">Mensuel</a></li>
  </ul>
 </li>
</ul>
</div>
</div>
</header>
<div class="container">
]])
end

function footer()
	print([[</div></body></html>]])
end

function parse_month(arg)
	local year, month

	if (arg == "") then
		local t = os.date("*t")

		year = t.year
		month = t.month
	else
		year, month = string.match(arg, "(%d+)/(%d+)")
		year = tonumber(year)
		month = tonumber(month)
	end

	return year, month
end

function dispatch()
	lang = getlang()
	conf = getconfig()
	path = os.getenv("PATH_INFO") or "/"

	-- connect database
	local driver = require "luasql.sqlite3"
	local env = driver.sqlite3()

	cnx = env:connect(conf['archive.sqlite.db'])

	-- process query
	if path == "/" then
		require "wsview.current"
		require "wsview.summary"
		header()
		current()
		summary_today(cnx)
		footer()
	elseif path == "/summary/" then
		require "wsview.summary"
		header()
		summary_today()
		footer()
	elseif string.starts(path, "/climate/") then
		local arg = string.sub(path, 10) or ""
		local year, month = parse_month(arg)

		require "wsview.climate"
		header()
		climate(year, month)
		footer()
	elseif string.starts(path, "/rest/climate/") then
		local arg = string.sub(path, 15) or ""
		local year, month = parse_month(arg)

		require "wsview.rest"
		aggr_month(year, month)
	end

	cnx:close()
	env:close()
end

function run()
	local x = coroutine.create(dispatch)
	local hcache = ""
	local active = true
	
	while coroutine.status(x) ~= "dead" do
		local res, id, data1, data2 = coroutine.resume(x, r)

		if not res then
			io.write("Status: 500 Internal Server Error\r\n")
			io.write("Content-Type: text/plain\r\n\r\n")
			io.write(id)
			break;
		end

		if active then
			if id == 1 then
				io.write("Status: " .. tostring(data1) .. " " .. data2 .. "\r\n")
			elseif id == 2 then
				hcache = hcache .. data1 .. ": " .. data2 .. "\r\n"
			elseif id == 3 then
				io.write(hcache)
				io.write("\r\n")
			elseif id == 4 then
				io.write(tostring(data1 or ""))
			elseif id == 5 then
				io.flush()
				io.close()
				active = false
			elseif id == 6 then
				data1:copyz(nixio.stdout, data2)
				data1:close()
			end
		end
	end
end

run()
